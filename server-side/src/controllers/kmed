exports.updateCycleAndMedications = (req, res, next) => {
  const { Cycle_ID, Cycle_Note, Cycle_Documentation_Date, Medications } = req.body;
  const id = req.params.id;
  Cycles.findByPk(Cycle_ID)
    .then((activeCycle) => {
      if (!activeCycle) {
        return res.status(404).json({ error: 'Active cycle not found' });
      }
      const cycle_number = activeCycle.Cycle_Number;
      console.log(cycle_number);

      // deactivate current cycle
      activeCycle.Is_active = false;
      console.log(activeCycle.Is_active);
      // Update cycle note and documentation date if provided
      if (Cycle_Note) {
        activeCycle.Cycle_note = Cycle_Note;
      }
      if (Cycle_Documentation_Date) {
        activeCycle.Cycle_Documentation_Date = Cycle_Documentation_Date;
      }
      // Save the updated cycle
      return activeCycle.save();
    })
    .then((updatedCycle) => {
      // Find the next cycle and activate it
      return Patients.findByPk(id)
        .then((patient) => {
          if (!patient) {
            return res.status(404).json({ error: 'Patient not found' });
          }
          return patient.getTreatmentPlan();
        })
        .then((treatmentplan) => {
          console.log(treatmentplan)
          if (!treatmentplan) {
            return res.status(404).json({ error: 'Treatment plan not found' });
          }
          return treatmentplan.getCycles();
        })
        .then((cycles) => {
            console.cycles
          return cycles.find(
            (cycle) => cycle.Cycle_Number === updatedCycle.Cycle_Number + 1
          );
        });
    })
    .then((nextCycle) => {
      if (nextCycle) {
        nextCycle.Is_active = true; // Mark next cycle as active
        return nextCycle.save();
      }
      // Handle if there's no next cycle
      return Promise.resolve(); // Resolve without updating next cycle
    })
    .then(() => {
      // Update chemotherapy medications
      const updatePromises = Medications.map((med) => {
        const { ID, AdministeredDose_Ml, AdministeredDose_Mg } = med;
        if (!ID) {
          return Promise.reject({
            message: 'Medication ID is required for update',
          });
        }
        // Update specific fields of the medication by ID
        return ChemotherapyMedications.update(
          {
            Administered_Dose_ml: AdministeredDose_Ml,
            Administered_Dose_mg: AdministeredDose_Mg,
          },
          { where: { Chemotherapy_ID: ID } }
        ).catch((error) => {
          // Handle individual medication update errors
          // not working
          console.error('Error updating medication:', error.message);
          return Promise.reject({
            message: `Failed to update medication: ${ID}`,
          });
        });
      });

      return Promise.all(updatePromises);
    })
    .then(() => {
      res
        .status(200)
        .json({ message: 'Cycle and medications updated successfully' });
    })
    .catch((error) => {
      // Handle any errors occurred during the update process
      console.error('Error:', error.message);
    });
};