{"ast":null,"code":"var _jsxFileName = \"F:\\\\Uni\\\\chemotherapy-management-system\\\\src\\\\components\\\\DropDownMenu\\\\DropDownMenu.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n// import \"./style.css\";\n// import RegimenDetails from \"components/redimenDetails/RegimenDetails\";\n\n// const regimens = [\n//   \"CHOP: Protocol for Non Hodgkin Lymphoma\",\n//   \"AC - Regimen for Non-Metastatic, Locally-Advanced Breast Cancer. Before or after Taxol\",\n//   \"CMF-Breast Cancer Regimen\",\n//   \"COP - Regimen for Non-Metastatic Non Hodgkin Lymphoma\",\n// ];\n\n// export default function DropDownMenu() {\n//   const [isOpen, setIsOpen] = useState(false);\n//   const [selectedOption, setSelectedOption] = useState(\"none\");\n//   const dropdownRef = useRef(null);\n\n//   useEffect(() => {\n//     function handleClickOutside(event) {\n//       if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n//         setIsOpen(false);\n//       }\n//     }\n\n//     document.addEventListener(\"mousedown\", handleClickOutside);\n//     return () => {\n//       document.removeEventListener(\"mousedown\", handleClickOutside);\n//     };\n//   }, []);\n\n//   const toggleDropdown = () => {\n//     setIsOpen(!isOpen);\n//   };\n\n//   const handleOptionSelect = (option) => {\n//     setSelectedOption(option);\n//     setIsOpen(false);\n//   };\n\n//   return (\n//     <div className=\"regimens-details-container\">\n//       <div className=\"dropdown-container\" ref={dropdownRef}>\n//         <div\n//           className={`dropdown-header ${isOpen ? \"open\" : \"\"}`}\n//           onClick={toggleDropdown}\n//         >\n//           <span>{selectedOption === \"none\" ? \"None\" : selectedOption}</span>\n\n//           <span className={`arrow ${isOpen ? \"up\" : \"down\"}`}></span>\n//         </div>\n//         {isOpen && (\n//           <div className=\"dropdown-list\">\n//             {regimens.map((regimen, index) => (\n//               <div\n//                 key={index}\n//                 className=\"dropdown-option\"\n//                 onClick={() => handleOptionSelect(regimen)}\n//               >\n//                 {regimen}\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//       </div>\n//       {selectedOption !== \"none\" && (\n//         <RegimenDetails selectedOption={selectedOption} />\n//       )}\n//     </div>\n//   );\n// }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./style.css\";\nimport RegimenDetails from \"components/redimenDetails/RegimenDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst regimens = [\"CHOP: Protocol for Non Hodgkin Lymphoma\", \"AC - Regimen for Non-Metastatic, Locally-Advanced Breast Cancer. Before or after Taxol\", \"CMF-Breast Cancer Regimen\", \"COP - Regimen for Non-Metastatic Non Hodgkin Lymphoma\"];\nexport default function DropDownMenu({\n  initialSelectedOption\n}) {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(initialSelectedOption);\n  const dropdownRef = useRef(null);\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleOptionSelect = option => {\n    setSelectedOption(option);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"regimens-details-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-container\",\n      ref: dropdownRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `dropdown-header ${isOpen ? \"open\" : \"\"}`,\n        onClick: toggleDropdown,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: selectedOption === \"none\" ? \"None\" : selectedOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `arrow ${isOpen ? \"up\" : \"down\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-list\",\n        children: regimens.map((regimen, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-option\",\n          onClick: () => handleOptionSelect(regimen),\n          children: regimen\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), selectedOption !== \"none\" && /*#__PURE__*/_jsxDEV(RegimenDetails, {\n      selectedOption: selectedOption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(DropDownMenu, \"MYIgb/2IPkL7nMrXuJpojVGmnkg=\");\n_c = DropDownMenu;\nvar _c;\n$RefreshReg$(_c, \"DropDownMenu\");","map":{"version":3,"names":["React","useEffect","useRef","useState","RegimenDetails","jsxDEV","_jsxDEV","regimens","DropDownMenu","initialSelectedOption","_s","isOpen","setIsOpen","selectedOption","setSelectedOption","dropdownRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","toggleDropdown","handleOptionSelect","option","className","children","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","regimen","index","_c","$RefreshReg$"],"sources":["F:/Uni/chemotherapy-management-system/src/components/DropDownMenu/DropDownMenu.jsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\r\n// import \"./style.css\";\r\n// import RegimenDetails from \"components/redimenDetails/RegimenDetails\";\r\n\r\n// const regimens = [\r\n//   \"CHOP: Protocol for Non Hodgkin Lymphoma\",\r\n//   \"AC - Regimen for Non-Metastatic, Locally-Advanced Breast Cancer. Before or after Taxol\",\r\n//   \"CMF-Breast Cancer Regimen\",\r\n//   \"COP - Regimen for Non-Metastatic Non Hodgkin Lymphoma\",\r\n// ];\r\n\r\n// export default function DropDownMenu() {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n//   const [selectedOption, setSelectedOption] = useState(\"none\");\r\n//   const dropdownRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     function handleClickOutside(event) {\r\n//       if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n//         setIsOpen(false);\r\n//       }\r\n//     }\r\n\r\n//     document.addEventListener(\"mousedown\", handleClickOutside);\r\n//     return () => {\r\n//       document.removeEventListener(\"mousedown\", handleClickOutside);\r\n//     };\r\n//   }, []);\r\n\r\n//   const toggleDropdown = () => {\r\n//     setIsOpen(!isOpen);\r\n//   };\r\n\r\n//   const handleOptionSelect = (option) => {\r\n//     setSelectedOption(option);\r\n//     setIsOpen(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"regimens-details-container\">\r\n//       <div className=\"dropdown-container\" ref={dropdownRef}>\r\n//         <div\r\n//           className={`dropdown-header ${isOpen ? \"open\" : \"\"}`}\r\n//           onClick={toggleDropdown}\r\n//         >\r\n//           <span>{selectedOption === \"none\" ? \"None\" : selectedOption}</span>\r\n\r\n//           <span className={`arrow ${isOpen ? \"up\" : \"down\"}`}></span>\r\n//         </div>\r\n//         {isOpen && (\r\n//           <div className=\"dropdown-list\">\r\n//             {regimens.map((regimen, index) => (\r\n//               <div\r\n//                 key={index}\r\n//                 className=\"dropdown-option\"\r\n//                 onClick={() => handleOptionSelect(regimen)}\r\n//               >\r\n//                 {regimen}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//       {selectedOption !== \"none\" && (\r\n//         <RegimenDetails selectedOption={selectedOption} />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport RegimenDetails from \"components/redimenDetails/RegimenDetails\";\r\n\r\nconst regimens = [\r\n  \"CHOP: Protocol for Non Hodgkin Lymphoma\",\r\n  \"AC - Regimen for Non-Metastatic, Locally-Advanced Breast Cancer. Before or after Taxol\",\r\n  \"CMF-Breast Cancer Regimen\",\r\n  \"COP - Regimen for Non-Metastatic Non Hodgkin Lymphoma\",\r\n];\r\n\r\nexport default function DropDownMenu({ initialSelectedOption }) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState(initialSelectedOption);\r\n  const dropdownRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsOpen(false);\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  const toggleDropdown = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const handleOptionSelect = (option) => {\r\n    setSelectedOption(option);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"regimens-details-container\">\r\n      <div className=\"dropdown-container\" ref={dropdownRef}>\r\n        <div\r\n          className={`dropdown-header ${isOpen ? \"open\" : \"\"}`}\r\n          onClick={toggleDropdown}\r\n        >\r\n          <span>{selectedOption === \"none\" ? \"None\" : selectedOption}</span>\r\n\r\n          <span className={`arrow ${isOpen ? \"up\" : \"down\"}`}></span>\r\n        </div>\r\n        {isOpen && (\r\n          <div className=\"dropdown-list\">\r\n            {regimens.map((regimen, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"dropdown-option\"\r\n                onClick={() => handleOptionSelect(regimen)}\r\n              >\r\n                {regimen}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n      {selectedOption !== \"none\" && (\r\n        <RegimenDetails selectedOption={selectedOption} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}