{"ast":null,"code":"var _jsxFileName = \"F:\\\\Uni\\\\chemotherapy-management-system\\\\src\\\\components\\\\ReactTable\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { createElement as _createElement } from \"react\";\nimport { flexRender, getCoreRowModel, useReactTable, getSortedRowModel } from \"@tanstack/react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sizes = {\n  xs: \"p-3\",\n  sm: \"p-[19px]\"\n};\nconst ReactTable = ({\n  columns,\n  data = [],\n  headerProps = {},\n  bodyProps = {},\n  className = \"\",\n  rowDataProps = {\n    className: \"\"\n  },\n  size,\n  ...restConfig\n}) => {\n  _s();\n  const tableConfig = {\n    columns,\n    data,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    ...restConfig\n  };\n  const table = useReactTable(tableConfig);\n\n  // Render the UI for your table\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      ...headerProps,\n      children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: headerGroup.headers.map(header => {\n          var _header$column$column;\n          return /*#__PURE__*/_jsxDEV(\"th\", {\n            ...((_header$column$column = header.column.columnDef) === null || _header$column$column === void 0 ? void 0 : _header$column$column.meta),\n            children: header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())\n          }, header.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this);\n        })\n      }, headerGroup.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      ...bodyProps,\n      children: table.getRowModel().rows.map(row => /*#__PURE__*/_createElement(\"tr\", {\n        ...rowDataProps,\n        className: `${rowDataProps === null || rowDataProps === void 0 ? void 0 : rowDataProps.className}`,\n        key: row.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      }, row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n        className: size ? sizes[size] : ``,\n        children: flexRender(cell.column.columnDef.cell, cell.getContext())\n      }, cell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this))))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ReactTable, \"+qfJc9U8evODZQ8bBg9G2KVouAc=\", false, function () {\n  return [useReactTable];\n});\n_c = ReactTable;\nexport { ReactTable };\nvar _c;\n$RefreshReg$(_c, \"ReactTable\");","map":{"version":3,"names":["React","createElement","_createElement","flexRender","getCoreRowModel","useReactTable","getSortedRowModel","jsxDEV","_jsxDEV","sizes","xs","sm","ReactTable","columns","data","headerProps","bodyProps","className","rowDataProps","size","restConfig","_s","tableConfig","table","children","getHeaderGroups","map","headerGroup","headers","header","_header$column$column","column","columnDef","meta","isPlaceholder","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","getRowModel","rows","row","key","__self","__source","getVisibleCells","cell","_c","$RefreshReg$"],"sources":["F:/Uni/chemotherapy-management-system/src/components/ReactTable/index.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { flexRender, getCoreRowModel, useReactTable, getSortedRowModel } from \"@tanstack/react-table\";\r\n\r\nconst sizes = {\r\n  xs: \"p-3\",\r\n  sm: \"p-[19px]\",\r\n};\r\n\r\nconst ReactTable = ({\r\n  columns,\r\n  data = [],\r\n  headerProps = {},\r\n  bodyProps = {},\r\n  className = \"\",\r\n  rowDataProps = { className: \"\" },\r\n  size,\r\n\r\n  ...restConfig\r\n}) => {\r\n  const tableConfig = {\r\n    columns,\r\n    data,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    ...restConfig,\r\n  };\r\n\r\n  const table = useReactTable(tableConfig);\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <table className={className}>\r\n      <thead {...headerProps}>\r\n        {table.getHeaderGroups().map((headerGroup) => (\r\n          <tr key={headerGroup.id}>\r\n            {headerGroup.headers.map((header) => (\r\n              <th key={header.id} {...header.column.columnDef?.meta}>\r\n                {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...bodyProps}>\r\n        {table.getRowModel().rows.map((row) => (\r\n          <tr {...rowDataProps} className={`${rowDataProps?.className}`} key={row.id}>\r\n            {row.getVisibleCells().map((cell) => (\r\n              <td key={cell.id} className={size ? sizes[size] : ``}>\r\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport { ReactTable };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}